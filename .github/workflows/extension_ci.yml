name: PGMQ Extension

defaults:
  run:
    shell: bash
    working-directory: ./

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types:
      - created

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust minimal nightly with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pgmq-extension-lint"
          workspaces: |
            pgmq/
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgrx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: ./
      - name: Cargo format
        run: cargo +nightly fmt --all --check
      - name: Clippy
        run: cargo clippy

  test:
    name: Run tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        pg: [
          {version: "12.16", pgrx_version: "pg12"},
          {version: "13.12", pgrx_version: "pg13"},
          {version: "14.9", pgrx_version: "pg14"},
          {version: "15.4", pgrx_version: "pg15"},
          {version: "16.0", pgrx_version: "pg16"}
        ]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pgmq-extension-test-${{ matrix.pg.pgrx_version }}"
          workspaces: |
            pgmq
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgrx
      - uses: ./.github/actions/pgx-init
        with:
          working-directory: ./
          pgrx_pg_version: ${{ matrix.pg.pgrx_version }}
          pg_version: ${{ matrix.pg.version }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --allow-downgrades postgresql-client-common=238
          sudo apt-get install -y --allow-downgrades postgresql-common=238 postgresql-server-dev-14
          sudo apt-get install -y --allow-downgrades postgresql-server-dev-all
          # We need to make sure that only clang 14 is installed in the host before
          # it tries to compile pgrx, as having multiple versions cause issues
          # per https://github.com/pgcentralfoundation/pgrx/issues/1298
          sudo apt-get autoremove -y clang-13 lldb-13 lld-13 clang-15 lldb-15 lld-15
      - name: Install pg_partman
        run: |
          git clone https://github.com/pgpartman/pg_partman.git && \
          cd pg_partman && \
          git checkout v4.7.4 && \
          sudo make install && cd ../
          cp /usr/share/postgresql/14/extension/pg_partman* ~/.pgrx/${{ matrix.pg.version }}/pgrx-install/share/postgresql/extension/
          cp /usr/lib/postgresql/14/lib/pg_partman_bgw.so ~/.pgrx/${{ matrix.pg.version }}/pgrx-install/lib/postgresql/
      - name: Run tests
        run: |
          rm -rf ./target/pgrx-test-data-* || true
          cargo pgrx run ${{ matrix.pg.pgrx_version }} --pgcli || true
          PGRX_POSTGRES=${{ matrix.pg.pgrx_version }} make test

  publish:
    # only publish release events
    if: github.event_name == 'release'
    name: trunk publish
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pgmq-extension-test"
          workspaces: |
              pgmq/extension
          # Additional directories to cache
          cache-directories: |
            /home/runner/.pgrx
      - name: Install stoml and pg-trunk
        shell: bash
        run: |
         set -xe
         wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
         mv stoml_linux_amd64 stoml
         chmod +x stoml
         sudo mv stoml /usr/local/bin/
         cargo install pg-trunk
      - name: trunk build
        working-directory: ./
        run: trunk build
        # use below when trunk build supports --dockerfile for pgrx
        # run: |
        #   pgmq_ver=$(stoml extension/Cargo.toml package.version)
        #   trunk build --path . --dockerfile ./Dockerfile.build --install-command "cd extension && cargo pgrx install" --name pgmq --version ${pgmq_ver}
      - name: trunk publish
        working-directory: ./
        env:
          TRUNK_API_TOKEN: ${{ secrets.TRUNK_AUTH_TOKEN }}
        run: |
          pgmq_ver=$(stoml Cargo.toml package.version)
          pgmq_descr=$(stoml Cargo.toml package.description)
          pgmq_repo=$(stoml Cargo.toml package.repository)
          trunk publish pgmq --version ${pgmq_ver} --file .trunk/pgmq-${pgmq_ver}.tar.gz --description "A lightweight distributed message queue. Like AWS SQS and RSMQ, on Postgres." --homepage "https://github.com/tembo-io/pgmq" --repository "https://github.com/tembo-io/pgmq" --license "PostgreSQL" --category featured --category orchestration
  build_and_push:
    name: Build and push images
    needs:
      - publish
    runs-on:
      - self-hosted
      - dind
      - large-8x8
    outputs:
      short_sha: ${{ steps.versions.outputs.SHORT_SHA }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Install stoml and pg-trunk
        shell: bash
        run: |
         set -xe
         wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
         mv stoml_linux_amd64 stoml
         chmod +x stoml
         sudo mv stoml /usr/local/bin/
      - name: Set version strings
        id: versions
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "TAG_VER=$(/usr/local/bin/stoml Cargo.toml package.version)" >> $GITHUB_OUTPUT
      - name: Build and upload image
        run: |
          docker build --build-arg="PGMQ_VER=${{ steps.versions.outputs.TAG_VER }}" -t pgmq-pg images/pgmq-pg
          docker tag pgmq-pg quay.io/tembo/pgmq-pg:v${{ steps.versions.outputs.TAG_VER }}
          docker tag pgmq-pg quay.io/tembo/pgmq-pg:latest
      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io/tembo
          username: ${{ secrets.QUAY_USER_TEMBO }}
          password: ${{ secrets.QUAY_PASSWORD_TEMBO }}
      - name: Push image
        run: |
          docker push quay.io/tembo/pgmq-pg:v${{ steps.versions.outputs.TAG_VER }}
          docker push quay.io/tembo/pgmq-pg:latest
