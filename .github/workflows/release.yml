name: ⚙️ Release on Quay, Trunk, PGXN
on:
  push:
    # Release on semantic version tag.
    tags: ['v[0-9]+.[0-9]+.[0-9]+']
jobs:
  pgxn-release:
    if: github.repository == 'tembo-io/pgmq'
    name: Release on PGXN
    runs-on: ubuntu-latest
    container: pgxn/pgxn-tools
    defaults:
      run:
        working-directory: ./pgmq-extension
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Bundle the Release
        run: make dist
      - name: Release on PGXN
        env:
          PGXN_USERNAME: ${{ secrets.PGXN_USERNAME }}
          PGXN_PASSWORD: ${{ secrets.PGXN_PASSWORD }}
        run: pgxn-release
  trunk-release:
    if: github.repository == 'tembo-io/pgmq'
    name: Release on Trunk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg-version: [14, 15, 16, 17]
    defaults:
      run:
        working-directory: ./pgmq-extension
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install stoml and pg-trunk
        shell: bash
        run: |
          set -xe
          wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
          mv stoml_linux_amd64 stoml
          chmod +x stoml
          sudo mv stoml /usr/local/bin/
          cargo install pg-trunk
      - name: Make trunk
        run: make Trunk.toml
      - name: trunk build
        run: trunk build --pg-version ${{ matrix.pg-version }}
      - name: trunk publish
        env:
          TRUNK_API_TOKEN: ${{ secrets.TRUNK_AUTH_TOKEN }}
        run: |
          pgmq_ver=$(stoml Trunk.toml extension.version)
          pgmq_descr=$(stoml Trunk.toml extension.description)
          pgmq_repo=$(stoml Trunk.toml extension.repository)
          trunk publish pgmq --version ${pgmq_ver} --description "A lightweight message queue. Like AWS SQS and RSMQ, on Postgres." --homepage "https://github.com/tembo-io/pgmq" --repository "https://github.com/tembo-io/pgmq" --license "PostgreSQL" --category featured --category orchestration
  container-image-release:
    if: github.repository == 'tembo-io/pgmq'
    name: Build and push images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg: [14, 15, 16, 17]
    outputs:
      short_sha: ${{ steps.versions.outputs.SHORT_SHA }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Install stoml
        shell: bash
        run: |
          set -xe
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/freshautomations/stoml/releases/download/v0.7.1/stoml_linux_amd64 &> /dev/null
          mv stoml_linux_amd64 stoml
          chmod +x stoml
          sudo mv stoml /usr/local/bin/

      - name: Set version strings
        id: versions
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "TAG_VER=$(grep 'default_version' pgmq.control | cut -d "'" -f 2)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io/tembo
          username: ${{ secrets.QUAY_USER_TEMBO }}
          password: ${{ secrets.QUAY_PASSWORD_TEMBO }}
      - name: Generate dockerfile from template file
        working-directory: ./
        run: ./images/pgmq-pg/replace-pg-version.sh ${{ matrix.pg }} ./images/pgmq-pg/Dockerfile.in ./images/pgmq-pg/Dockerfile

      - name: Build and push -- Releases
        uses: docker/build-push-action@v5
        with:
          file: ./images/pgmq-pg/Dockerfile
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            quay.io/tembo/pg${{matrix.pg}}-pgmq:v${{ steps.versions.outputs.TAG_VER }}
            quay.io/tembo/pg${{matrix.pg}}-pgmq:latest